/*   Syntax definition of the M language.
/*
.symbol pad[mcomp_syn_pad] external    /* space allowed, comment, wrapped line, etc
.symbol space[mcomp_syn_space] external /* space or equivalent required
.symbol name                           /* single bare symbol name
.symbol qname                          /* symbol name that may be qualified
.symbol integer                        /* Embed integer, B#DDDDDDD
.symbol expression                     /* arbitrary expression that resolves to a value
.symbol accesstype                     /* memory access type
.symbol dtype                          /* data type definition or reference
.symbol statement[mcomp_syn_statement] /* one top level statement
/*
/*   Parts of statements without their leading keyword.
/*
.symbol memory_
.symbol memregion_
.symbol adrspace_
.symbol adrregion_
.symbol set_
/*
/*   Syntax constructions that are sub-statements.  These are intended to be
/*   called separately for each sub-statement by the code interpreting the
/*   syntax.  They therefore need to have externally known names
/*
.symbol type_sub[mcomp_syn_type]       /* substatement in TYPE block


.define name .as                       /* bare symbol name
  .charcase [upper]
  .range['A' thru 'Z']
  .occurs[0 to inf] (
    .range['A' thru 'Z'] .or
    .range['0' thru '9'] .or
    "_"
    )

.define qname .as                      /* possibly qualified symbol name
  .optional ":"[1]
  name[2]
  .occurs[0 to inf] (":" name[2])

.define integer .as                    /* integer in standard Embed format
  .charcase [upper]
  .optional ("-" .or "+")
  .optional (
    .occurs[1 to inf] .range["0" thru "9"]
    "#"
    )
  .occurs[1 to inf] (
    .range["0" thru "9"] .or
    .range["A" thru "Z"]
    )

.define expression .as                 /* arbitrary expression
  integer[1]                           /* temp placeholder

.define accesstype .as
  .occurs[1 to inf] (
    space
    ("-"[2] .or .null[1])
    ( "read"[1] .or
      "write"[2] .or
      "execute"[3] .or
      "inherit"[4]
      )
    )

.define dtype .as
  ("integer"[2] space (
      "signed"[1] .or
      ("bits" space integer[2]) .or
      ("bitsexact" space integer[3]))
    ) .or
  qname[1]

.define statement .as
  .eod[1] .or (
    ("memory" space memory_[2]) .or
    ("memregion" space memregion_[3]) .or
    ("adrspace" space adrspace_[4]) .or
    ("adrregion" space adrregion_[5]) .or
    ("set" space set_[6]) .or
    "type"[7] .or
    set_[6]
    )
  pad .eol
/*
/*   Parts of statements that follow the keyword.  These have the name of the
/*   statement with underscore appended.
/*
.define memory_ .as
  name[1]
  .occurs[0 to inf] (
    space
    ("adrbits" space integer[1]) .or
    ("datbits" space integer[2]) .or
    ("access" accesstype[3])
    )

.define memregion_ .as
  name[1] space "in" space name[1]
  .occurs[0 to inf] (
    space
    ("startadr" space integer[1]) .or
    ("length" space integer[2]) .or
    ("endadr" space integer[3]) .or
    ("access" accesstype[4])
    )

.define adrspace_ .as
  name[1]
  .occurs[0 to inf] (
    space
    ("adrbits" space integer[1]) .or
    ("datbits" space integer[2]) .or
    ("access" accesstype[3])
    )

.define adrregion_ .as
  name[1] space "in" space name[1]
  .occurs[0 to inf] (
    space
    ("startadr" space integer[1]) .or
    ("length" space integer[2]) .or
    ("endadr" space integer[3]) .or
    ("access" accesstype[4]) .or
    ("mapsto" space name[5])
    )

.define set_ .as
  qname[1] pad "<<" pad expression[1]
/*
/*   Substatements within specific blocks.
/*
.define type_sub .as
  name[1] space dtype[1]
